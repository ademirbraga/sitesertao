//$Id: utils.js,v 1.3 2009/01/26 20:16:27 claudia Exp $// ------------------- General Object related methods ---------------------- //if (document.all)    var browser_ie=trueelse if (document.layers)    var browser_nn4=trueelse if (document.layers || (!document.all && document.getElementById))    var browser_nn6=trueif (window.navigator.userAgent.toUpperCase().indexOf("OPERA") >= 0)	    var browser_opera=true;	/** * Retruns the x position of the given object in the window / screen. */function findPosX(obj) {    var curleft = 0;    if (document.getElementById || document.all) {        while (obj.offsetParent) {            curleft += obj.offsetLeft;            obj = obj.offsetParent;        }    }     else if (document.layers) {        curleft += obj.x;    }    return curleft;}/** * Retruns the x position of the given object in the window / screen. */function findPosY(obj) {    var curtop = 0;    if (document.getElementById || document.all) {        while (obj.offsetParent) {            curtop += obj.offsetTop;            obj = obj.offsetParent;        }    } else if (document.layers) {        curtop += obj.y;    }    return curtop;}function findDocDim() {    if (browser_ie) {        return {            width : document.body.offsetWidth,            height : document.body.offsetHeight        }    } else if (browser_nn4 || browser_nn6) {        return {            width : window.screen.width - ((scrX - pgeX) + document.body.scrollLeft),            height : window.screen.height - ((scrY - pgeY) + document.body.scrollTop)        }    }}var scrollConst = 0;if (browser_nn4 || browser_nn6) scrollConst = 125;/** * Finding screenTop, screenLeft, pageTop, pageLeft during a particular event (used for Mozilla browser) */var scrX = 0, scrY = 0, pgeX = 0, pgeY = 0, srcElement;if (browser_ie) {    document.attachEvent("onclick", popUpListener);} else if (browser_nn4 || browser_nn6) {    document.addEventListener("click", popUpListener, true);}function popUpListener(e) {    if (browser_ie) {        srcElement = window.event.srcElement;    } else if (browser_nn4 || browser_nn6) {        srcElement = e.target;        scrX = e.screenX;        scrY = e.screenY;        pgeX = e.pageX;        pgeY = e.pageY;    }}/** * Retruns the object for the given element id and document object. */function getObj(n,d) {    var p,i,x;     if(!d)        d=document;    if((p=n.indexOf("?"))>0&&parent.frames.length) {        d=parent.frames[n.substring(p+1)].document;        n=n.substring(0,p);    }    if(!(x=d[n])&&d.all){        x=d.all[n];    }    for(i=0;!x&&i<d.forms.length;i++){        x=d.forms[i][n];    }    for(i=0;!x&&d.layers&&i<d.layers.length;i++){        x=getObj(n,d.layers[i].document);    }    if(!x && d.getElementById){        x=d.getElementById(n);    }    return x;}/** * Creating trim() function and added to String object as prototype */String.prototype.trim = function() {    var x = this;    x = x.replace(/^\s*(.*)/, "$1");    x = x.replace(/(.*?)\s*$/, "$1");    return x;}/** * Creating outerHTML() function and added to HTML Element as prototype */if(!document.all){    HTMLElement.prototype.outerHTML    setter =  function(str)    {        var r = this.ownerDocument.createRange();        r.setStartBefore(this);        var df = r.createContextualFragment(str);        this.parentNode.replaceChild(df, this);        return str;    };      HTMLElement.prototype.outerHTML    getter =  function ()    {        return getOuterHTML(this)    };      function getOuterHTML(node)    {        var str = "";        var empties = ["IMG", "HR", "BR", "INPUT"];          switch (node.nodeType)        {            case 1: // ELEMENT_NODE                str += "<" + node.nodeName;                for(var i = 0; i < node.attributes.length; i++)                {                    if(node.attributes.item(i).nodeValue != null)                    {                        str += " "                        str += node.attributes.item(i).nodeName;                        str += "=\"";                        str += node.attributes.item(i).nodeValue;                        str += "\"";                    }                }                  if(node.childNodes.length == 0 && empties.getIndexOf(node.nodeName) > 0)                    str += ">";                else                {                    str += ">";                    str += node.innerHTML;                    str += "</" + node.nodeName + ">"                }                break;              case 3:  //TEXT_NODE                str += node.nodeValue;                break;              case 4: // CDATA_SECTION_NODE                str += "<![CDATA[" + node.nodeValue + "]]>";                break;              case 5: // ENTITY_REFERENCE_NODE                str += "&" + node.nodeName + ";"                break;              case 8: // COMMENT_NODE                str += "<!--" + node.nodeValue + "-->"                break;        }          return str;    }      function Array_getIndexOf(el)    {        var index = -1;          for(var i = 0; i < this.length; i++)        {            if(this[i] == el)            {                index = i;                break;            }        }          return index;    }      Array.prototype.getIndexOf = Array_getIndexOf;}function reloadAndCloseWindow(additionalParamsToPass){    if(self.parent.window.opener != null)    {        self.parent.window.opener.addRequestParams(self.parent.window.opener.ROOT_VIEW_ID, additionalParamsToPass);        self.parent.window.opener.refreshCurrentView();    }    self.parent.window.close();}function enableCustomization(){    var previousData = stateData[ROOT_VIEW_ID]["_D_RP"];    if(previousData != null){        stateData[ROOT_VIEW_ID]["_D_RP"] = previousData + "PERSONALIZE=TRUE";    }    else {        stateData[ROOT_VIEW_ID]["_D_RP"] = "PERSONALIZE=TRUE";    }    refreshCurrentView();}function enableViewMode(){    var previousData = stateData[ROOT_VIEW_ID]["_D_RP"];    if(previousData != null){        stateData[ROOT_VIEW_ID]["_D_RP"] = previousData + "PERSONALIZE=FALSE";    }    else {        stateData[ROOT_VIEW_ID]["_D_RP"] = "PERSONALIZE=FALSE";    }    refreshCurrentView();}function showBorder(elementId){    element = document.getElementById(elementId + "_Border");    element.className = 'showDivBorder';}function hideBorder(elementId){    element = document.getElementById(elementId + "_Border");    element.className = 'divBorder';}function searchViews(searchObject){    document.getElementById('views').className = 'show';    return updateSearchData('ListViewConfigurations', searchObject);}function expandCollapse(elemId, imgID){    var ids = new Array('rmImg', 'avlImg');    var tabs = new Array('_RmTab', '_AvlTab');    if(document.getElementById('_NewTab') != null){        ids[ids.length] = 'newImg';        tabs[tabs.length] = '_NewTab';    }    if(document.getElementById('_SearchTab') != null){        ids[ids.length] = 'srcImg';        tabs[tabs.length] = '_SearchTab';    }    for(var i = 0; i < tabs.length; i++){        currId = tabs[i];        if(currId == elemId){            if(document.getElementById(elemId).className == 'show'){                document.getElementById(elemId).className = 'hide';                document.getElementById(imgID).className = 'collapse';                document.getElementById('views').className = 'hide';            }            else {                document.getElementById(elemId).className = 'show';                document.getElementById(imgID).className = 'expand';                if(currId == '_SearchTab'){                    document.getElementById('views').className = 'hide';                    document.getElementById('orgTab1').className = 'hide';                    document.getElementById('orgTab2').className = 'hide';                    document.getElementById('dummyTab1').className = 'show';                    document.getElementById('dummyTab2').className = 'show';                }                if(currId == '_AvlTab'){                    document.getElementById('views').className = 'show';                    document.getElementById('orgTab1').className = 'show';                    document.getElementById('orgTab2').className = 'show';                    document.getElementById('dummyTab1').className = 'hide';                    document.getElementById('dummyTab2').className = 'hide';                    if(stateData["ListViewConfigurations"]){                        updateSearchData('ListViewConfigurations', document.getElementById('groupSearch'));                    }                }                if(currId == '_RmTab'){                    document.getElementById('views').className = 'hide';                    document.getElementById('orgTab1').className = 'show';                    document.getElementById('orgTab2').className = 'show';                    document.getElementById('dummyTab1').className = 'hide';                    document.getElementById('dummyTab2').className = 'hide';                }                if(currId == '_NewTab'){                    document.getElementById('views').className = 'hide';                }            }        }        else {            document.getElementById(currId).className = 'hide';            document.getElementById(ids[i]).className = "collapse";        }    }}function enableForm(formName){    document.getElementById(formName + "ReadMode").className = 'hide';    document.getElementById(formName + "EditMode").className = 'show';}var customize_uniqueId = null;/** * */function showCustomizeLinks(linksId, id, event,referenceId){    customize_uniqueId = referenceIds[referenceId];    linksId = linksId + referenceId;    getObj(linksId).style.display="block";    getObj(linksId).style.left=findPosX(getObj(id));    getObj(linksId).style.top=findPosY(getObj(id))+getObj(id).offsetHeight;}/** * */function hideCustomizationMenu(ev){    // TODO:    // This is not the way for healthy coding. The links to be removed have    // been hardcoded. This is because, hiding takes place on click of the    // body. Two events cannot be fired from there.Hence  the hardcoding.    // Something needs to be done.    if (browser_ie){        currElement=window.event.srcElement;    }    else if (browser_nn4 || browser_nn6){        currElement=ev.target;    }    var id = currElement.id;    if(id.indexOf("ICM") < 0 && customize_uniqueId != null){        var refId = stateData[customize_uniqueId]["ID"];        var element = document.getElementById("GridCustomizationLinks" + refId);        if(element != null){            if (getObj("GridCustomizationLinks" + refId).style.display=="block"){                getObj("GridCustomizationLinks" + refId).style.display="none";            }        }        element = document.getElementById("TabCustomizationLinks" + refId);        if(element != null){            if (getObj("TabCustomizationLinks" + refId).style.display=="block"){                getObj("TabCustomizationLinks" + refId).style.display="none";            }        }    }}/* * */function openCustomizationWindow(url, params){    url = url + "&UNIQUEID=" + customize_uniqueId;    window.open(url, customize_uniqueId, params);}function openCW(url, type, refId, reqParams, winParams){    var uId = referenceIds[refId];    var vName = stateData[uID]["_VN"];    url = url + "?VIEWNAME=" + vName + "&UNIQUEID=" + uId;    if(type != null){        url = ul + "&TYPE=" + type;    }    if(reqParams != null){        url = url + "&" + reqParams;    }    window.open(url, uId, winParams);}function popWindow(url,name,x,y,isResizable){    // To pop upa new window with the given url and dimensions    var posX = (screen.width/2)-(x/2);    var posY = (screen.height/2)-(y/2);    var winPref = "width=" + x + ",height=" + y    + ",innerWidth=" + x + ",innerHeight=" + y    + ",left=" + posX + ",top=" + posY    + ",screenX=" + posX + ",screenY=" + posY    + ",toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=yes,"    + "resizable="+isResizable;      var newWin = window.open(url,name,winPref);     if (window.focus)    {        newWin.focus();    } }/** * Transfers the content from the source mesage holder to the destination * message holder which are represented by the srcMessageDiv and * destMessageDiv. Also by default it sets the scroll bars back to their * original position of [0,0]. This can de disabled by setting the initScroll * to false. * * @param	srcMessageDiv		the source message div id. * @param	destMessageDiv	the destination message div id. * @param	initScroll			true to reset scroll position, false to leave is as such. */function addContentToMessageDiv(srcMessageDiv, destMessageDiv, initScroll){    var srcObj = document.getElementById(srcMessageDiv);    var destObj = document.getElementById(destMessageDiv);    if(srcObj != null && destObj != null){        destObj.innerHTML = srcObj.innerHTML;    }    if(initScroll == null || initScroll){        document.body.scrollTop = 0;        document.body.scrollLeft = 0;    }}function promptViewTitleIfReq(cusViewName,frm){    var title = prompt("Enter View Title");    if(title == null)    {        return false;    }    frm.VIEWNAME.value = title;    frm.TITLE.value = title;    return true;}function isCookieEnabled(){    var isCookieEnabled = true;    if(document.cookie == ""){        document.cookie = "AcceptsCookiesCheck=yes";        if(document.cookie.indexOf('AcceptsCookiesCheck=yes') == -1){            isCookieEnabled = false;        }    }    // This line is not required. Need to confirm this and remove    document.cookie = "";    return isCookieEnabled;}function isBrowserSupported(){    var agt=navigator.userAgent.toLowerCase();    this.major = parseInt(navigator.appVersion);    this.minor = parseFloat(navigator.appVersion);    this.nav  = ((agt.indexOf('mozilla')!=-1) && (agt.indexOf('spoofer')==-1)        && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera')==-1)        && (agt.indexOf('webtv')==-1));    this.nav5up = (this.nav && (this.major >= 5));    this.ie   = (agt.indexOf("msie") != -1);    this.ie5up  = (this.ie && (this.major == 4) && (agt.indexOf("msie 6.0")> 0) );    this.opera = (agt.indexOf("opera") != -1);    if((this.nav5up || this.ie5up) && !this.opera){        return true;    }    else {        return false;    }}/** * Appends either ? or & to the url. Can be used for appending further parameters. */ function getURLSuffixed(url){    if(url.lastIndexOf('?') == -1)    {        url += "?";    }    else if(url.indexOf('?') > 0 && url.charAt(url.length-1) != '&')    {        url += "&";    }    return url;}/** * Appends the parameter to the url. Takes care of appending ? or & and * also escapes the value. In case paramvalue is null, then url is just returned. **/function appendParamToUrl(url,paramname,paramvalue){    if(paramvalue == null) return url;    return getURLSuffixed(url)+  paramname + "=" + escape(paramvalue);}function showMessage(message, result){    var htmlSnippet = "";    if(result == "true"){        htmlSnippet = htmlSnippet.concat("<Input type='button' class='successMessage'>");    }    else {        htmlSnippet = htmlSnippet.concat("<Input type='button' class='failureMessage'>");    }    htmlSnippet = htmlSnippet.concat(message);    htmlSnippet = htmlSnippet.concat("<Input type='button' class='closeMessage' onClick='return closeMessage();'>");    var insertObj = document.getElementById("messagediv");    insertObj.innerHTML = htmlSnippet;    insertObj.className = "MessageDiv";}function closeMessage(){    document.getElementById("messagediv").className = 'hide';}function getXMLHttpRequest(){    var xmlhttp=false;    try {        xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");    }     catch (e) {        try {            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");        }         catch (E) {            xmlhttp = false;        }    }    if (!xmlhttp && typeof XMLHttpRequest!='undefined') {        xmlhttp = new XMLHttpRequest();    }    return xmlhttp;}/** * Finding immediate parent TD in a row*/function findTD(oCheckBox) {    var oCurrTD;    var oElement = oCheckBox.parentNode;    while (oElement) {        if (oElement.tagName == "TD") {            oCurrTD = oElement;            break;        }        oElement = oElement.parentNode;    }	    return oCurrTD;}/** * Finding sibilings of a TD tag*/function findOtherTD(oCurrTD) {    var i = 0;    var oOtherTD = new Array();    var oPrevTD = oCurrTD.previousSibling;    while (oPrevTD) {        oOtherTD[i] = oPrevTD;        oPrevTD = oPrevTD.previousSibling;        i++;    }	    var oNextTD = oCurrTD.nextSibling;    while (oNextTD) {        oOtherTD[i] = oNextTD;        oNextTD = oNextTD.nextSibling;        i++;    }	    return oOtherTD;}/** * Hiltes selected row*/function rowSelect(oCheckBox) {    var oCurrTD = "";    oCurrTD = findTD(oCheckBox);	    var oOtherTD = new Array();    oOtherTD = findOtherTD(oCurrTD);	    oCurrTD.className = (oCheckBox.checked) ? oCurrTD.className + " select" : oCurrTD.className.substr(0,oCurrTD.className.indexOf("select"));    for (var i = 0; i < oOtherTD.length; i++)        oOtherTD[i].className = (oCheckBox.checked) ? oOtherTD[i].className + " select" : oOtherTD[i].className.substr(0,oOtherTD[i].className.indexOf("select"));	    if (oCheckBox.type == 'radio') {        var currId = oCheckBox.value;        var oRadio = oCheckBox.form.elements[oCheckBox.name];		        for (var i = 0; i < oRadio.length; i++) {            if (i != oCheckBox.value) {                oCurrTD = findTD(oCheckBox.form.elements[oCheckBox.name][i]);                oOtherTD = new Array();                oOtherTD = findOtherTD(oCurrTD);				                if (oCurrTD.className.indexOf("select") >= 0) {                    oCurrTD.className = oCurrTD.className.substr(0,oCurrTD.className.indexOf("select"))                    for (var j = 0; j < oOtherTD.length; j++)                        oOtherTD[j].className = oOtherTD[j].className.substr(0,oOtherTD[j].className.indexOf("select"));                }            }        }    }		}/** * Hiltes when row is hovered*/function rowHover(oTR, bIsHover) {    for (var i=0; i<oTR.childNodes.length; i++) {        if (document.all) oTD = oTR.childNodes[i];        else oTD = oTR.childNodes.item(i);		        if (oTD && oTD.tagName=="TD") {            if (oTD.className.indexOf("select") < 0)                oTD.className = (bIsHover) ? oTD.className + " hilite" : oTD.className.substr(0,oTD.className.indexOf("hilite"));        }    }}/** * Clears text selection */function clearTextSelection() {    if (window.getSelection) {        window.getSelection().removeAllRanges();    } else if (document.getSelection) {        var s = document.getSelection();        if (s.collapse) s.collapse(true);        if (s.removeAllRanges) s.removeAllRanges();    } else if (document.selection) {        document.selection.empty();    }	}function checkForAD(form){    var val = form.j_username.value;    if(val.indexOf("\\") > 0){        var val1 = val.substring(0, val.indexOf("\\"));        var val2 = val.substring(val.indexOf("\\") + 1);        form.j_username.value = val2;        var obj = document.createElement("input");        obj.type = "hidden";        obj.value = val1;        obj.name = "domainName";        form.appendChild(obj);    }}function abrepopup(url){    var name = "Pesquisa";    var posX = (screen.width/2)-(800/2);    var posY = (screen.height/2)-(600/2);    var winPref = "width=800,height=600,innerWidth=800,innerHeight=600,left=" + posX + ",top=" + posY    + ",screenX=" + posX + ",screenY=" + posY    + ",toolbar=0,location=0,directories=0,status=yes,menubar=0,scrollbars=yes,"    + "resizable=false";    var newWin = window.open(url,name,winPref);    if (window.focus)    {        newWin.focus();    } 	}/** * Excludes selected data from module and refresh the grid*/function delListData(modulo){    var dados = new Array();    $('#listGrid :checkbox:checked').each(function(e,grid){        dados.unshift($(grid).parent().parent().attr('id'));    });        if(confirm('Deseja realmente excluir os dados selecionados ?')){        $.post('../_ax/axRequest.php',{            modulo:modulo,            method:'excluir',            args:[dados]            },function(data){            $('#listGrid').trigger("reloadGrid");        });    }}/** *  */var FORM = {        element: {},        data: {},        async: false,        stop: false,        reloadHTML: true,        button: {},        afterAction: 'edit', // edit, new, redirect        cancel: function(){            this.stop = true;        },        enviaFrm: function(frm, afterAction, button){            this.stop = false;            this.button = button||{};            this.afterAction = afterAction||'edit';            this.element = $( '#' + frm );		            if(!this.element.find('#f_reload')[0]){                var html_freload = '<input type="hidden" id="f_reload" name="f_reload" value="1" />';                this.element.append(html_freload);            }            if( this.afterAction == 'redirect' ) {                this.element.find('#f_reload').val('0');            }            this.data = this.element.serializeArray();            this.actionCode = this.element.find('#f_action').val();            //aviso( 'Aviso', 'Validando os dados', '500' );	            // tratamento antes do envio dos dados            FORM.beforeSend(this.element);		            // Parada passada pelo usuario            if(this.stop){                return false;            }            if( $( "#" + frm + " input[name='APC_UPLOAD_PROGRESS']" )[0] ) {                $( "#" + frm ).submit();                return true;            }            if( this.element.find('#f_reload')[0] && this.element.find('#f_reload').val() == 0 ) {                this.reloadHTML = false;            } else {                this.reloadHTML = true;            }	            $.ajax({                url: '../_ax/axCadastrar.php',                type: 'post',                dataType: 'json',                async: FORM.async,                data: $.param(FORM.data),                success: function(response){                                        $("#debug").html(response.dbg);	                    // callback passado pela tela                    FORM.onSuccess(response);			                    if(response.resposta=='yes') { // if correct detail					                        $("#msgbox").fadeTo(200, 0.1, function(){ // start fading the messagebox                              //add message and change the class of the box and start fading                            aviso( 'Aviso', 'Registro cadastrado com sucesso', '500','ok.png' );                            if( FORM.afterAction == 'edit' ){                                if(window.location.href.search('&id=') == -1){                                    window.location.hash = '#id='+response.id;                                }							                                if( FORM.reloadHTML ) {								                                    $( "#content" ).empty();                                    $( "#content" ).html(response.content);                                    //aplMask();                                }												                            } else if ( FORM.afterAction == 'new' ) {                                window.location = window.location.href.replace('&id='+response.id, '');                            } else if ( FORM.afterAction == 'redirect' ) {                                var redirect = 	window.location.href                                .replace('Visualiza', 'Lista')                                .replace('&id='+response.id, '')                                .replace('#id='+response.id, '');                                window.location = redirect;										                            }			                        });                    } else {                        $("#msgbox").fadeTo(200, 0.1, function() { // start fading the messagebox                            $(this).html('Falha no cadastro.').addClass('messageboxerror').fadeTo(900,1);                            $("#msgResponse").html('Falha ao cadastrar registro');                        });                    }                }            });        },        onSuccess: function(response){            return response;        },        beforeSend: function(data){            return data;        },        disableButton: function( button ){            $('#form-button-'+button).hide();        }    };function show( div, title, width, height ) {    $('#'+div).dialog({        modal: false,        draggable: true,        title: title,        width: width,        height: height,        position: 'center',        resizable: false    });    if( buttons ) {        $( '#'+div ).dialog({            buttons: {                 "Ok": function() {                     $(this).dialog("close");                }            }        });    }    $('#'+div).html( content );    $('#'+div).dialog( 'open' );}function aplMask(){    $('input:text, input:password').setMask();    $('select[completeSemAjax]').combobox();    $('.inputcombo').click(function(){this.select()});} $.fx.speeds._default = 1000;function formatItem(row) {    return row[0]+" - <strong>" + row[1] + "</strong>";}function formatResult(row) {    return row[1];}function float2moeda(num) {    x = 0;    if(num<0) {        num = Math.abs(num);        x = 1;    }    if(isNaN(num)) num = "0";    cents = Math.floor((num*100+0.5)%100);    num = Math.floor((num*100+0.5)/100).toString();    if(cents < 10) cents = "0" + cents;    ret = num.replace('.','') + ',' + cents;    if (x == 1) ret = ' - ' + ret;    return ret;}function removeItem( id ) {    $( "#tr_"+id ).remove();}function criaSelect(cod,mod){    $('#cod_tipo_unidade_'+cod).load('../_ax/axSelect.php?modulo='+mod );}/** * Toggle checkbox value*/function check(obj){    if(obj.value==0) obj.value=1;    else obj.value = 0;}function getHour(){    data = new Date();    hora = data.getHours() + ":" + data.getMinutes() + ":" + data.getSeconds();    return hora;}$( document ).ajaxComplete( function( e, xhr, settings) {    var json = $.parseJSON( xhr.responseText );    $("#debug").prepend( json.debug );});function axDebug(){    $("#debug").show();    $("#debug").load("../_ax/axDebug.php");}function axSetDebug(frm){    $.post("../_ax/axDebug.php",$('#'+frm).serialize() ,function(data){        $("#debug").html(data.dbg);        if(data.resposta=='yes'){            aviso( 'Aviso', 'Debug Ativado com sucesso', '500' );        }else{            aviso( 'Aviso', 'Debug nao pode ser ativado', '500' );        }    },'json');}function aviso(titulo, texto, tempo, imagem) {    if(imagem != null){        $.gritter.add({            // (string | mandatory) the heading of the notification            title: titulo,            // (string | mandatory) the text inside the notification            text: texto,            // (string | optional) the image to display on the left            sticky: false,            image: "../_img/"+imagem,            // (int | optional) the time you want it to be alive for before fading out            time: tempo        });    }else{        $.gritter.add({            // (string | mandatory) the heading of the notification            title: titulo,            // (string | mandatory) the text inside the notification            text: texto,            // (string | optional) the image to display on the left            sticky: false,            // (int | optional) the time you want it to be alive for before fading out            time: tempo        });    }};// N�o sei exatamente onde ficam os js de layout ent�o vai aqui por enquanto;var forceMenuPrincipal = false;function toggleMenuPrincipal(force){	    if(forceMenuPrincipal)        return false;	    $('#menu-principal').animate({        width: 'toggle'    });		    $('#container #mainbody .right').toggleClass('right_full');    $(this).toggleClass('turn_arrow');	    if($('#container #mainbody .right').hasClass('right_full')){        $('#container #mainbody .right').animate({            width: '880px'        });        $('#toggle_sidebar a').html('&nbsp; Mostrar menu');		    } else {        $('#container #mainbody .right').animate({            width: '699px'        });        $('#toggle_sidebar a').html('&nbsp; Esconder menu');    }    if(force){        forceMenuPrincipal = true;    }	}$(function(){	    $('#toggle_sidebar a').click(function(){		        forceMenuPrincipal = false;        toggleMenuPrincipal();    });	    Export.init();	});function Tip(msg){    $(".help").tipTip({        defaultPosition:"right"    }); // Usando atributo titulo como texto    $(".help").tipTip({        defaultPosition:"right",         content:msg    }); // Usando um texto exemplo}function UnTip(){; // Usando somente para ter que retirar de cada campo}/** * Objeto que trata os eventos e argumentos para a exporta��o de relat�rios */Export = {    _defaults: {        url: 'Exportar.php',        beforeRedirect: function(args){},	        filterArgs : function (args){}    },    options: {},    elements: {},    args: {},    convertTo: 'pdf',    convertFrom: 'data',    init: function( options ) {		        this.options = $.extend(true, this._defaults, options||{});		        this.args.querys = [];        this.args.params = {};		        this.elements = $('.Export');        var to = '';		        this.elements.each(function(){			            to = $(this).attr('rel');            $(this).addClass('export-'+to);        });		        this.elements.live('click', function() {					            var link = $(this);            var href = link.attr('href')            .replace('javascript:void(0);', '')            .replace('#', '');			            Export.addArgs( href );	            Export.convertTo =  $(this).attr('rel') || $(this).attr('to');            Export.convertFrom =  $(this).attr('from');			            Export.addArgs( {                'convertTo' : Export.convertTo,                 'convertFrom' : Export.convertFrom            } );			            Export.redirect();			            return false;        });		    },    redirect: function() {				        //console.log(args);		        this.options.beforeRedirect( this.args );		        var args = this.buildQuery();		        var url = this.options.url;		        url += '?'+args;					        window.location = url;		    },    buildQuery: function() {		        var query = [];			        if( typeof this.args.querys != 'undefined' && this.args.querys.length ) {            query.push( this.args.querys.join('&') );        }				        query.push( $.param(this.args.params) );		        return query.join('&');    },    /**	 * Adiciona ou substitui os parametros da url	 * @var object/string args	 * @var boolean replace - se for verdadeira todos os parametros do redirecionamento ser�o substituidos	 */    addArgs: function( args , replace) {		        replace = replace||false;			        if( replace ) {            this.args = {};			        }				        if( args ) {			            if( typeof(args) == 'object' ) {				                this.args.params = $.extend(this.args.params, this.parseSerializedArray( args ) ) ;            } else if( typeof(args) == 'string' ) {                this.args.querys.push( $.trim(args) );            }			        }		    },    /**	 * Purpose: Transforma array do tipo: [{ name : 'field_1', value : '1'}, { name : 'field_2', value : '1'}]	 * @var object obj	 * @return object/json obj	 */    parseSerializedArray: function ( obj ) {		        var json = {};		        if( $.isArray( obj ) ) {			            for (i in obj) {                if( typeof obj[i].value != 'undefined' ) {                    json[obj[i].name] = obj[i].value;                }            } 			            return json;        }			        return obj;		    }		};/** * Helpers - In�cio de uma id�ia para agrupar algumas fun��es javascript que utilizamos  * no nosso dia a dia e que n�o est�o em bibliotecas como jQuery */HELPERS = {    /**	 * Retira a m�scara colocada nos valores dos campos	 * @param string:integer Valor a ser "limpo"	 * @param string Tipo de m�scara. ex.: decimal	 * @return string	 */    Unmask: function( value_, pattern_  ) {        switch( pattern_ )        {            case 'decimal':                return parseFloat( value_.replace('.','').replace(',','.') );	                break;        }		    },    CheckAjaxError: function ( obj_, msg_ ) {		        if( typeof obj_ == 'object' && obj_.response.Error ) {            var erro = obj_.response.Error;            // Tipo: MySQL -  Existem depend�ncias para este registro            if( erro.code == '23000') {                msg_ = "Nao foi possovel excluir este registro, existem outras informacoes associadas a ele. \nPor favor remover as dependencias e tentar novamente.";            }		            alert( msg_||'Erro no sistema.' );			            HELPERS.Abort( msg_ );			            return true;        }		        return false;		    },    Abort: function ( msg_ ) {        throw new Error( msg_||'Erro no sistema.' );    }	};/* * Verifica o limite de registros para os clientes que alugaram o . * No menu -> Admin. Sistema h� o item "Limites", caso n�o esteja no menu * � necess�rio habilitar em constantes.inc alterando o valor da constante * MOSTRAR_LIMITES para true. * A verifica��o � feita na classe SisLimitacoes * Tabelas usadas limitacao e sis_limitacoes */function verificaLimiteCadastro(){        FORM.beforeSend = function(){                var params = {            modulo: '96',            method: 'verificaLimitesCadastro',            args: {modulo: $('#f_mod').val()}        };                $.ajax({            url: '../_ax/axRequest.php',            async:false,            type: 'post',            dataType: 'json' ,            data: params,            success: function(r){                if(r.response){                    $('#msgResponse').html("Voce atingiu o limite de cadastros").dialog();                    FORM.cancel();                    return false;                }            }			        });    };}// Criacao do componente select que possui autocomplete dos proprios dados// Ao ser passado para essa funcao um selectbox, o mesmo sera substitu�do por esse componente$.widget("ui.combobox", {    // Ao ser criado    _create: function() {        // esconder e pegar o selectbox e seu valor selecionado, caso haja        var self = this,            select = this.element.hide(),            selected = select.children(":selected"),            value = selected.val() ? selected.text() : "";        // cria o novo componente do tipo input        var input = this.input = $("<input>")            // inseri-lo apos o select, com o mesmo valor do select e adicionar a fun��o de autocomplete            .insertAfter(select)            .val(value)            .autocomplete({                delay: 0,                minLength: 0,                // a fonte de busca do autocomplete ser� os options do select                source: function(request, response) {                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");                    response(select.children("option").map(function() {                        var text = $(this).text();                        // destacar as coincid�ncias nos resultados da busca, alterar os valores                        if (this.value && ( !request.term || matcher.test(text) ))                            return {                                label: text.replace(                                    new RegExp(                                        "(?![^&;]+;)(?!<[^<>]*)(" +                                            $.ui.autocomplete.escapeRegex(request.term) +                                            ")(?![^<>]*>)(?![^&;]+;)", "gi"                                    ), "<strong>$1</strong>"),                                value: text,                                option: this                            };                    }));                },                select: function(event, ui) {                    // alterar as sele��es ao selecionar                    ui.item.option.selected = true;                    self._trigger("selected", event, { item: ui.item.option });                },                change: function(event, ui) {                    // ao alterar verifica se o escolhido bate com alguma op��o                    if (!ui.item) {                        var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex($(this).val()) + "$", "i"),                            valid = false;                        select.children("option").each(function() {                            if ($(this).text().match(matcher)) {                                this.selected = valid = true;                                return false;                            }                        });                        if (!valid) {                            // Remove os valores, caso o que foi escrito n�o coincida com nenhuma op��o                            $(this).val("");                            select.val("");                            input.data("autocomplete").term = "";                            return false;                        }                    }                }            })            .addClass("ui-widget ui-widget-content inputcombo");        input.data("autocomplete")._renderItem = function(ul, item) {            // renderiza o componente com os �tens do combo            return $("<li></li>")                .data("item.autocomplete", item)                .append("<a>" + item.label + "</a>")                .appendTo(ul);        };        this.button = $("<button type='button'>&nbsp;</button>")            // Adiciona o bot�o de abertura das op��es            .attr("tabIndex", -1)            // Atribui o tiptext ao bot�o//            .attr('tiptext',$(select).attr('tiptext'))            // Inserir ap�s o input            .insertAfter(input)            .button({                // setinha pra baixo no bot�o (estilo jquery.ui) sem texto                icons: {                    primary: "ui-icon-triangle-1-s"                },                text: false            })            // para um aspecto mais s�rio, remover as bordas arredondadas do bot�o            .removeClass("ui-corner-all")            .addClass("ui-button-icon combobox")            .click(function() {                // ao clicar, fechar se estiver aberto o popup de op��oes                if (input.autocomplete("widget").is(":visible")) {                    input.autocomplete("close");                    return;                }                // Tirar e recolocar o foco para reiniciar                $(this).blur();                input.autocomplete("search", "");                input.focus();            });    },    destroy: function() {        // destruir tudo        this.input.remove();        this.button.remove();        this.element.show();        $.Widget.prototype.destroy.call(this);    }});$(document).ready(function(){    // Pega qualquer select que possua o parametro 'completesemajax' e transforma em autocomplete    // Ex de uso: <select completesemajax ... >    $('select[completeSemAjax]').combobox();    // Facilita o uso do combo autocomplete, fazendo que ao clicar, o texto fique selecionado    $('.inputcombo').click(function(){this.select()});})