<?phprequire_once 'Database.class.php';/** * @author root * */class DbUtils extends Database {	/**	 * @var Object $adapter	 */	protected $adapter;	/**	 * @var string $order	 */	protected $order;	/**	 * @var integer $quantidadeLinhas	 */	protected $quantidadeLinhas = 50;	/**	 * @var integer $numeroPagina	 */	protected $numeroPagina = 0;	/**	 * @var bool $log	 */	protected $log = false;	/**	 * @var array $logger	 */	protected $logger = array();		public $relatorioForm = array();		public $relatorioJS = '';	public $relatorioCSS = '';	public $_nomRelatorio = '';	public $relatorioExportFields = array();	/**	 * Construtor da classe	 * 	 * @param string $dbpadrao	 */	public function __construct( $dbpadrao = null, $_name = null ) {		$this->configAdapters( $dbpadrao );		parent::__construct( $_name );	}	/**	 * Popula os dados de $entrada como parametros da classe	 * 	 * @param array $entrada - Pares de coluna-valor que serão populados para a classe	 * @param string $_prefixo - Prefixo das colunas	 * @return boolean	 */	public function populate( $entrada, $_prefixo = '' ) {		if( empty( $entrada ) )			return false;					foreach( $this->_cols as $name ) {						$valor = null;			$nome_campo = $_prefixo.$name;						if( isset($entrada[$nome_campo]) ) {								$valor = $entrada[$nome_campo];								if( empty($valor) && !is_numeric($valor) ) { // tratamento de dados vazios obs.: 0 não é vazio										// A partir de agora todos os campos vazios que podem ser null, serão gravados null					//if( preg_match('/^dat_/', $name) && $this->_metadata[ $name ]['NULLABLE']){					if( $this->_metadata[ $name ]['NULLABLE'] ) {						$valor = new Zend_Db_Expr("NULL");										}									} else { // tratamento de dados enviados										if( preg_match('/^dat_/', $name) ) {												$noTime = false;												$format = 'd/m/Y H:i:s';												if( strpos(' ', $valor) === false ) {							$format = 'd/m/Y';							$noTime = true;						}						if (version_compare(PHP_VERSION, '5.3.0') >= 0) {												    $date = DateTime::createFromFormat($format, $valor);						    						    if($date){							if( $noTime ) {								$date->setTime(0,0,0);							}							$valor = $date->format('Y-m-d H:i:s');						    }						    //echo "nova".PHP_VERSION.'=='.$valor;die;						}else{						    $datvl = implode("-",array_reverse(explode("/",$valor)));						    $test = new DateTime($datvl);						    $valor = date_format($test, 'Y-m-d H:i:s'); // 2011-03-03 00:00:00						    //echo "veia".PHP_VERSION.'=='.$valor;die;					    													}					}										}							} else { // tratamento de campos necessários que não foram enviados								if( preg_match('/^bol_/', $name) ) {					$valor = $this->_metadata[ $name ]['DEFAULT'];								}							}						if( isset($valor) ) {								if( $valor != 'NULL' ) {					$this->{$name} = ($valor);				} else {					$this->{$name} = $valor;				}				}					}				return true;			}	/**	 * Retorna os parametros da classe como um array associativo coluna-valor	 * 	 * @return array	 */	public function objToArray() {		$saida = array();		foreach( $this->_cols as $row )			$saida[ $row ] = $this->{$row};		return $saida;	}	/**	 * Configura o adaptador que será usado na conexão	 * 	 * @param mixed $config - Array/XML com a configuração das conexões	 */	public function configAdapters( $dbpadrao = null ) {		$config = DBCONFIG;		$ambiente = AMBIENTE;		if( null == $dbpadrao )			$dbpadrao = DBPADRAO;		if( is_file( $config ) || ( is_array( $config ) && !empty( $config ) ) ) {			if( is_file( $config ) ) {				$config = simplexml_load_file( $config );				$config = (array)$config;			}		} else {			throw new Exception( 'A configuração informada não é um formato válido!' );		}		if( !isset( $config['database'] ) )			throw new Exception( 'Database não configurada!' );		$config['database'] = (array)$config['database'];		if( !isset( $config['database'][ $ambiente ] ) )			throw new Exception( 'Ambiente não configurado' );		$config['database'][ $ambiente ] = (array)$config['database'][ $ambiente ];		if( !isset( $config['database'][ $ambiente ][ $dbpadrao ] ) )			throw new Exception( 'Database padrão não configurada' );		$config = (array)$config['database'][ $ambiente ][ $dbpadrao ];		if( empty( $config['password'] ) )			$config['password'] = null;		list( $adaptador, $host, $username, $password, $dbname ) = array_values( $config );		if( null === $adaptador || null === $host || null === $username || null === $dbname )			throw new Exception( 'Parametros de conexão nulos' );		$object = $this->getAdapterClass( $adaptador );		$database = new $object(			array(				'host'     => $host,				'username' => $username,				'password' => $password,				'dbname'   => $dbname			)		);		$this->adapter = $database;		return;	}	/**	 * Retorna a classe que será usada pro adaptador de conexão	 * 	 * @param string $adapter	 */	public function getAdapterClass( $adapter = null ) {		if( null === $adapter )			return;		switch( $adapter ) {			case 'pdo_mysql':				$object = 'Zend_Db_Adapter_Pdo_Mysql';				break;			case 'mysqli':				$object = 'Zend_Db_Adapter_Mysqli';				break;			case 'db2':				$object = 'Zend_Db_Adapter_Db2';				break;			case 'oracle':				$object = 'Zend_Db_Adapter_Oracle';				break;		}		return $object;	}	/**	 * Retorna a chave primária da tabela em questão	 * 	 * @return int	 */	public function getKey() {		return $this->_primary[1];	}	/**	 * Formata os dados de entrada em uma matriz de pares Coluna-Valor	 * 	 * Caso a matriz $dados seja informada faremos uma iteração sobre os	 * dados formatando uma nova matriz de saida	 * 	 * Caso a matriz $dados não seja informada efetuaremos uma consulta	 * utilizando a função getPairs()	 * 	 * @param string $chave	- Coluna que será a chave da matriz	 * @param string $valor - Coluna que será o valor da matriz	 * @param string $dados - Opcional com a matriz de dados a ser formatada	 * @return array		- Matriz Coluna-Valor	 */	public function formatDados( $chave = null, $valor = null, $dados = array() ) {		/**		 * Se a coluna chave e a coluna valor 		 * não forem informadas retornamos um 		 * array vazio 		 */		if( null === $chave && null === $valor )			return array();		/**		 * Caso a matriz de dados esteja vazia efetuamos a consulta		 * montando a clausula SQL com a chave e o valor informado		 * Em seguida chamo o metodo getPares que executa o metodo		 * fetchAll com a opção FETCH_KEY_PAIR da PDO		 */		if( empty( $dados ) )			return self::listar( "{$chave}, {$valor}" )->getPares();		$registros = array();		/**		 * Caso a matriz de dados tenha sido informada		 * iteramos sobre ela montando uma nova matriz de saida		 */		foreach( $dados as $key => $value ) {			if( is_array( $value ) && !empty( $value ) ) {				if( isset( $value[ $chave ] ) )					$registros[ $value[ $chave ] ] = isset( $value[ $valor ] ) ? $value[ $valor ] : 'Não informado';			}		}		return $registros;	}	/**	 * Executa uma consulta e retorna a quantidade de registros encontrados	 * 	 * @param string $where - Clausula where utilizada na consulta	 * @return int - Quantidade de registros encontrados	 */	public function recordCount( $where = null ) {		$select = $this->select();		if( null !== $where )			$select->where( $where );        $select->from( $this->_name, 'COUNT(1) as num' );        $filtroCancelamento = $this->getFiltroCancelamento();		if( null !== $filtroCancelamento )			$select->where( $filtroCancelamento );		$filtroRevenda = $this->getFiltroRevenda();		if( null !== $filtroRevenda )			$select->where( $filtroRevenda );        $this->consultaSql( $select );        $quantidade = $this->getRegistro();        return (int)$quantidade['num'];	}	/**	 * Seta a quantidade de linhas por página na listagem	 * 	 * @param int $quantidadeLinhas - Quantidade de linhas	 */	public function setLinhasPorPagina( $quantidadeLinhas = 50 ) {		if( (int)$quantidadeLinhas )			$this->quantidadeLinhas = (int)$quantidadeLinhas;	}	/**	 * Retorna a quantidade de linhas setadas por página	 * 	 * @return number $quantidadeLinhas	 */	public function getLinhasPorPagina() {		return $this->quantidadeLinhas;			}	/**	 * @param unknown_type $numeroPagina	 */	public function setNroPagina( $numeroPagina = 0 ) {		if( (int)$numeroPagina )			$this->numeroPagina = (int)$numeroPagina;			}	/**	 * @return number	 */	public function getNroPagina() {		return $this->numeroPagina;	}	/**	 * @param mixed $order	 */	public function setOrder( $order = '' ) {		if( !empty( $order ) )			$this->order = $order;	}	/**	 * @return mixed - String/Array	 */	public function getOrder() {		return $this->order;	}		/**	 * Habilita e desabilita o log de query's	 * 	 * @param bool $ativo	 */	public function enableLog( $ativo = false ) {		if( is_bool( $ativo ) )			$this->log = $ativo;	}	/**	 * @param bool $ativo	 * @param string $filtro	 */	public function filtroCancelamento( $ativo = false, $filtro = '' ) {		if( is_bool( $ativo ) ) {			if( $ativo && !empty( $filtro ) ) {				$this->filtros['cancelamento'] = $filtro;			} else {				$this->filtros['cancelamento'] = null;			}		}	}	/**	 * @return multitype:|NULL	 */	public function getFiltroCancelamento() {		if( isset( $this->filtros['cancelamento'] ) && null !== $this->filtros['cancelamento'] ) {			return $this->filtros['cancelamento'];		}		return null;	}	/**	 * @param bool $ativo	 * @param string $filtro	 */	public function filtroRevenda( $ativo = false, $filtro = '' ) {		if( is_bool( $ativo ) ) {			if( $ativo && !empty( $filtro ) ) {				$this->filtros['revenda'] = $filtro;			} else {				$this->filtros['revenda'] = null;			}		}	}	/**	 * @return multitype:|NULL	 */	public function getFiltroRevenda() {		if( isset( $this->filtros['revenda'] ) && null !== $this->filtros['revenda'] ) {			return $this->filtros['revenda'];		}		return null;	}	public function addFiltro( $_name = null, $filtro = null ) {		if( null === $_name || null === $filtro || !is_string( $filtro ) )			return;		$this->filtros[ $_name ] = $filtro;	}	/**	 * @return string	 */	public function getLastInsertId() {		return $this->getAdapter()->lastInsertId();	}	/**	 * @return number	 */	public function getNumRegistros() {		return $this->statement->rowCount();	}	/**	 * @return object Zend_Db_Profiler	 */	public function getProfile() {		return $this->getAdapter()->getProfiler()->getQueryProfiles();	}	public function showProfile() {		if( isset( $_SESSION['debug'] ) && $_SESSION['debug'] == SQL ) {			echo "<pre style='font-size:13px; font-weight:bold; font-family:Courier, monospace; color:#999;'>\n<br>";			print_r( $this->getAdapter()->getProfiler()->getLastQueryProfile()->getQuery() );			$params = $this->getAdapter()->getProfiler()->getLastQueryProfile()->getQueryParams();			if( !empty( $params ) ) {				echo "<br />";				print_r( $params );			}			echo "</pre><br /><br />";		}	}		public function getRelatorioDefault($args, $exec){				return false;				/*		global $lng;				$grid_config = array();					foreach ($this->_cols as $k ){			// Formata para o jGrid			$dados = $campo_grid = array ();						$campo_grid['name'] = $k;			$campo_grid['index'] = $k;			$campo_grid['sortable'] = true;									if( preg_match('/^dat_/', $k) ){				$campo_grid['formatter'] = 'date';				$campo_grid['formatoptions'] = array ('srcformat' => 'Y-m-d H:i:s', 'newformat' => 'd/m/Y H:i:s' );			}else if( preg_match('/^bol_/', $k) ){				$campo_grid['formatter'] = 'fmtBoolean';			}			$dados['grid_config']['colModel'] [] = $campo_grid;			$dados['grid_config']['colNames'] [] = $lng['txt_'.$k];		}				if( $exec ){						$dados['registros'] = array();			//if($args[''])						//$this->listar(null, );		}				return $dados;*/	}		public function addFiltrosRelatorio(){				$filtros = array();				foreach ($this->_cols as $k ){						$meta = $this->_metadata[$k];						$filtro = array( $k, 'text');						if( isset($meta['TINYINT']) ){				$filtro[1] = 'checkbox';			}else if( preg_match('/^dat_/', $k) ) {				$filtro[1] = 'date';			}						$filtros[$k] = $filtro;				}				return $filtros;	}	/**	 * @param string $filename	 * @param string $type	 */	public function setLogFile( $filename = 'log_file', $type = 'SQL' ) {		if( !file_exists( $filename ) ) {			$this->mkdir_r( dirname( $filename ) );			$fp = fopen( $filename, "w" );			fclose ( $fp );		}		$this->logger[ $type ] = $filename;	}	/**	 * @param string $dirName	 * @param int $rights	 */		public function mkdir_r( $dirName, $rights = 0777 ) {		$dirs = explode( '/', $dirName );		$dir = '';		foreach( $dirs as $part ) {			$dir .= $part . '/';			if( !is_dir( $dir ) && strlen( $dir ) > 0 )				mkdir( $dir, $rights );		}	}	/**	 * @param mixed $msg	 * @param string $type	 */	public function saveLog( $msg, $type = "SQL" ) {		if( $this->log ) {			if( is_array( $msg ) ) {				$str_msg = "";				foreach( $msg as $key => $value )					$str_msg .= $key . "=>" . $value . ";";			} else {				$str_msg = str_replace( array( "\n", "\r", "	", "  " ), array( "", "", " ", " " ), $msg );			}			error_log( date( 'd-m-Y G:i:s' ) . " -- " . $_SESSION ['usr'] ['cod_usuario'] . ";" . $str_msg . ";" . "\r\n\r\n", 3, $this->logger[ $type ] );		}	}		/**	 * Monta o where com os filtros do relatório	 * @param array $filtros	 * @param array $especiais	 */	public function montaWhereRelatorio($filtros, $especiais = null){		// array('nom_agente' => 'like')		$where = array();				if( isset($filtros) ){						// Retira lixo vindo do formulário do relatório			unset($filtros['modulo']				, $filtros['metodoGrafico']				, $filtros['modulo_relatorio']				, $filtros['metodo']				, $filtros['_search']				, $filtros['rows']				, $filtros['page']				, $filtros['sidx']				, $filtros['sord']				, $filtros['nd']				, $filtros['export']);							if( !empty($filtros) ) {				foreach( $filtros as $k => $valor ){										$campo = preg_replace('/-/','.', $k, 1);										if( !empty($valor) ){												if( isset($especiais[$campo]) &&  $especiais[$campo] == 'like') {														$where[] = "$campo like '%{$valor}%'";														} else {															$where[] = "$campo = '{$valor}'";													}						}									}			}		}				return $where;	}		/**	 * Configura a paginação	 * NOTE: Utilizar antes da chamada da função 'consulta'	 * @param int $limit	 * @param int $page	 * @return boolean	 */	public function setPaginacao( $limit = null, $page ) {				if( isset($limit) ) {						$this->setLinhasPorPagina( $limit );						}		if( isset($page) ) {			$this->setNroPagina( $page );		}		return false;					}		public function setRelatorioForm($formulario){		$this->relatorioForm = $formulario;	}	public function getRelatorioForm(){		return $this->relatorioForm;	}	public function setRelatorioJS($js){		$this->relatorioJS = $js;		}	public function getRelatorioJS(){		return $this->relatorioJS;	}	public function setRelatorioCSS($css){		$this->relatorioCSS = $css;	}	public function getRelatorioCSS(){		return $this->relatorioCSS;	}	public function setnomRelatorio( $nomRelatorio = null ) {		$this->_nomRelatorio = $nomRelatorio;	}	public function getnomRelatorio() {		return $this->_nomRelatorio;	}	public function getCurrentTimestamp() {		$sql = "SELECT CURRENT_TIMESTAMP as time";		$current_timestamp = $this->consultaSql( $sql )->getRegistro();		return $current_timestamp['time'];	}	public function setExportFields($fields) {		$this->relatorioExportFields = $fields;	}	public function getExportFields($fields) {		return $this->relatorioExportFields;	}	public function limpaCampos($dados=array()){		foreach($dados as $k=>$v){			$dados[$k] = trim($v);			if(empty($v) || $v == ''){				unset($dados[$k]);			}		}		return $dados;	}		}?>